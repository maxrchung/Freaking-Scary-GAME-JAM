local HOST = 'localhost'
local PORT = 1666

-- Set this to true on one client to enable server
local IS_SERVER = true

function init(self)
	if IS_SERVER then
		self.server = socket.udp()
		self.server:settimeout(0)
		self.server:setsockname('*', PORT)
		self.clients = {}
		print('Server started')
	end

	self.client = socket.udp()
	self.client:settimeout(0)
	self.client:setpeername(HOST, PORT)
	self.client_id = -1
	msg.post('.', 'send_to_server', { command = 'connect' })
	print('Client started')

	msg.post(".", "acquire_input_focus")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	-- TODO: Handle disconnects
end

function update(self, dt)
	if IS_SERVER then
		-- receivefrom tells us host/port info
		local data, host, port = self.server:receivefrom()
		if data then
			print('Server received: ', data, host,  port)
			local decoded = json.decode(data)
			
			if decoded.command == 'connect' then
				local next_index = #self.clients + 1
				
				-- ??? wtf Lua
				self.clients[next_index] = { host = host, port = port, id = next_index }

				-- Tell client about it's ID
				msg.post('.', 'send_to_client', { command = 'set_client_id', client_id = next_index })
			elseif decoded.command == 'set_client_id' then
				self.client_id = decoded.client_id
			end
		end
	end

	local data = self.client:receive()
	if data then
		print('Client received: ', data) 
	end
end

-- Use these messages to communicate with server/client
-- Other game objects can send messages here to communicate
function on_message(self, message_id, message, sender)
	local data = json.encode(message)

	print('Message: ' .. message_id .. ' ' .. data)
	
	if message_id == hash('send_to_all_clients') then
		for index, client in pairs(self.clients) do
			self.server:sendto(data, client.host, client.port)
		end
	elseif message_id == hash('send_to_client') then
		local client = self.clients[message.client_id]
		self.server:sendto(data, client.host, client.port)
	elseif message_id == hash('send_to_server') then
		self.client:send(data)
	end
end

function on_input(self, action_id, action)
	-- Test commands to send stuff from client or server

	-- Send something from client to server
	if action_id == hash('network_debug_1') then
		msg.post('.', 'send_to_server', { message = 'test message from a client!' })
	-- Send something from server to all clients
	elseif action_id == hash('network_debug_2') then
		msg.post('.', 'send_to_all_clients', { message = 'test message from server!' })
	end
end