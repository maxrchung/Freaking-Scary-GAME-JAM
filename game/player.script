-- Player logic

-- Whether to handle like a server or client
go.property('is_server', false)

-- Indicates whether the player is for the current client
go.property('is_self', false)

-- The client ID associated with this player that's assigned by server
go.property('client_id', -1)

-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 450
-- gravity pulling the player down in pixel units
local gravity = -1900
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 1200

-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("ground")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local input_more = hash("more_spin")
local input_less = hash("less_spin")
local anim_walk = hash("walk")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")

function init(self)
	if self.is_self or self.is_server then
		msg.post('/zoomies/zoomies#zoomies', 'make_angry')
		msg.post('/zoomies/zoomies#camera', 'acquire_camera_focus')
		msg.post('/zoomies/zoomies#camera', 'enable')
		msg.post('@render:', 'use_camera_projection')
	end
	
	if self.is_server then
		-- initial player velocity
		self.velocity = vmath.vector3(0, 0, 0)
		-- the direction the player is facing
		self.facing_direction = 0
		-- support variable to keep track of collisions and separation
		self.correction = vmath.vector3()
		-- if the player stands on ground or not
		self.ground_contact = false
		-- the currently playing animation
		self.anim = nil
		-- how fast is the joel joeling
		self.spin_speed = 0
		-- mouse lock state
		self.mouse_locked = false
		-- what are we hooked to
		self.hooked_object = nil
		self.angular_velocity = 0
		self.last_hook_angle = 0
		self.last_hook_velocity = vmath.vector3()

		self.mouth_offset = vmath.vector3(83, 56, 0)
		self.hook_angle_offset = vmath.quat()
	end
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		-- sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way
	go.set("#sprite", "playback_rate", math.abs(self.spin_speed))
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function fixed_update(self, dt)
	if not self.is_server then
		return
	end
	
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt

	-- apply angular velocity
	if math.abs(self.angular_velocity) > 0 then
		self.angular_velocity = self.angular_velocity * 0.98  -- Decay the rotation over time
		go.set_rotation(vmath.quat_rotation_z(self.angular_velocity * dt) * go.get_rotation())
	end
	
	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- update animations based on state (ground, air, move and idle)
	update_animations(self)
	
	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false

	-- hook shit
	if self.hooked_object then
		local current_rotation = go.get_rotation(self.hooked_object) * self.hook_angle_offset
		local current_pos = go.get_position(self.hooked_object) - vmath.rotate(current_rotation, self.mouth_offset)

		if self.last_position then
			self.last_hook_velocity = (current_pos - self.last_position) / dt
			self.angular_velocity = (current_rotation.z - self.last_rotation.z) / dt
		end

		self.last_position = current_pos
		self.last_rotation = current_rotation

		go.set_position(current_pos)
		go.set_rotation(current_rotation)
		msg.post(self.hooked_object, 'apply_impulse', { impulse = self.velocity })
	end

	-- Ensure the camera does not rotate with the player
end

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0

		-- make the chef angry?
		msg.post("/chef/chef#chef", "make_angry")
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
		self.ground_contact = false
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	-- only change facing direction if direction is other than 0
	if direction ~= 0 then
		self.facing_direction = direction
	end
	-- update velocity and use different velocity on ground and in air
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		-- move slower in the air
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

local function release_from_hook(self)
	if self.hooked_object then
		-- Apply the combined velocity
		self.velocity = vmath.vector3(self.last_hook_velocity.x * 6, self.last_hook_velocity.y * 6, 0)
		self.angular_velocity = self.angular_velocity * 15

		-- Clear hook reference
		self.hooked_object = nil
		self.last_position = nil
		self.last_rotation = nil
	end
end

local function input(self, action_id, action)
	if action.dy then
		self.spin_speed = self.spin_speed + action.dy / 1000
	end

	-- freaking hash serialization
	if action_id == "hash: [left]" then
		walk(self, -action.value)
	elseif action_id == "hash: [right]" then
		walk(self, action.value)
	elseif action_id == "hash: [jump]" then
		if action.pressed then
			release_from_hook(self)
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end

function on_message(self, message_id, message, sender)
	if not self.is_server then
		return
	end
	
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	elseif message_id == hash('input') then
		input(self, message.action_id, message.action)
	elseif message_id == hash("trigger_response") and message.other_group == hash("hook") then
		if message.enter then
			self.hooked_object = message.other_id
			self.hook_angle_offset = go.get_rotation() * vmath.conj(go.get_rotation(message.other_id))
			msg.post(self.hooked_object, 'apply_impulse', { impulse = self.velocity * 20 })
		end
	end
end
