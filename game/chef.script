go.property('is_server', false)

function init(self)
    self.anger = nil
    self.t = 0
end

function fixed_update(self, dt)
    if not self.is_server then
        return
    end
    
    if self.anger then
        local current_position = go.get_position()
        local anger_position = go.get_position(self.anger)
        
        -- Calculate the control point for the Bezier curve
        local control_point = (current_position + anger_position) * 0.5 + vmath.vector3(0, 50, 0) -- Adjust the offset as needed
        
        -- Update the t parameter based on dt
        self.t = self.t + dt * 0.01 -- Adjust the speed as needed
        if self.t > 1 then self.t = 0 end
        
        -- Calculate the Bezier curve point
        local bezier_point = (1 - self.t) * (1 - self.t) * current_position + 2 * (1 - self.t) * self.t * control_point + self.t * self.t * anger_position
        
        -- Move the object towards the Bezier curve point
        bezier_point.y = current_position.y
        bezier_point.z = 0.5
        go.set_position(bezier_point)
    end
end

function on_message(self, message_id, message, sender)
    if not self.is_server then
        return
    end
    
    if message_id == hash("make_angry") and not self.anger then
        local is_disabled = go.get(sender, 'is_disabled')
        if is_disabled then
            return
        end
        
        self.anger = sender
        self.t = 0 -- Reset t when a new anger target is set
    elseif message_id == hash("stop_angry") and self.anger == sender then
        self.anger = nil
        self.t = 0
    elseif message_id == hash("trigger_response") and message.other_group == hash("player") then
        local is_disabled = go.get(msg.url(nil, message.other_id, 'player'), 'is_disabled')
        if message.enter and not is_disabled then
            local player_position = go.get_position(message.other_id)
            sprite.play_flipbook("#sprite", "chef_down")

            local sashimi_speed = math.random(100, 400)
            local sashimi_rotation = math.random() * math.pi / 3 - math.pi / 6
            -- Spawn the sashimi
            msg.post('/networking#networking', 'send_to_all_clients', {
                command = 'chef_chop',
                position_x = player_position.x,
                position_y = player_position.y,
                speed = sashimi_speed,
                rotation = sashimi_rotation
            })

            collectionfactory.create(
                '/networking#sashimi_factory',
                vmath.vector3(player_position.x, player_position.y, 0),
                vmath.quat_rotation_z(sashimi_rotation),
                { [hash('/sashimi')] = { speed = sashimi_speed } },
                1 -- reset scaling
            )

            local dead_id = go.get(msg.url(nil, message.other_id, 'player'), 'client_id')
            msg.post(message.other_id, 'disable')
            msg.post('/networking#networking', 'send_to_all_clients', {
                command = 'die',
                dead_id = dead_id
            })
            msg.post(msg.url(nil, message.other_id, 'player'), 'die')
            -- There seems to be some race condition where player could potentially not be fully disabled yet, so hopefully doing this instead of passing a message will be quicker?
            go.set(msg.url(nil, message.other_id, 'player'), 'is_disabled', true)
            
            timer.delay(2, false, function()
                msg.post(message.other_id, 'enable')
                msg.post('/networking#networking', 'send_to_all_clients', {
                    command = 'revive',
                    revive_id = dead_id
                })
                msg.post(msg.url(nil, message.other_id, 'player'), 'revive')
                
                local respawn_position = go.get_position('/hook/hook')
                respawn_position.x = respawn_position.x - 100
                respawn_position.y = respawn_position.y - 50
                go.set_position(respawn_position, message.other_id)
                go.set_rotation(vmath.quat(), message.other_id)
            end)


            self.anger = nil

            timer.delay(0.5, false, function()
                sprite.play_flipbook("#sprite", "chef_knife_up")
                msg.post('/networking#networking', 'send_to_all_clients', { command = 'chef_angy' })
            end)
        end
    end
end
